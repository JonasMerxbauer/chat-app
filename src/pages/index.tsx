import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import { useEffect, useRef, useState } from "react";

import { env } from "../env/client.mjs";
import Pusher from "pusher-js";
import { atom, useAtom } from "jotai";
import { atomWithStorage } from "jotai/utils";

type Message = {
  user: User;
  messageId?: string;
  message: string;
  timestamp: Date;
};

type User = {
  username: string;
};

const userAtom = atom("");

const Home: NextPage = () => {
  const [user] = useAtom(userAtom);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-white">
        {user === "" && <Login />}
        {user !== "" && <Chat />}
      </main>
    </>
  );
};

export default Home;

const Login: React.FC = () => {
  const [, setUser] = useAtom(userAtom);
  const inputRef = useRef<HTMLInputElement>(null);

  const fetchUser = async () => {
    if (inputRef.current?.value === "" || !inputRef.current) return;

    // let data = await (
    //   await fetch("/api/user/" + inputRef.current.value)
    // ).json();
    // if (data === null) {
    //   data = await (
    //     await fetch("/api/user", {
    //       method: "POST",
    //       body: JSON.stringify({ username: inputRef.current.value }),
    //     })
    //   ).json();
    // }

    // console.log(data);

    setUser(inputRef.current.value);
  };
  return (
    <div className="flex h-28 flex-col justify-around">
      <div className="relative rounded-md border border-gray-300 bg-white px-3 py-2 shadow-sm focus-within:border-indigo-600 focus-within:ring-1 focus-within:ring-indigo-600">
        <label
          htmlFor="name"
          className="absolute -top-2 left-2 -mt-px inline-block bg-white px-1 text-xs font-medium text-gray-900"
        >
          Name
        </label>
        <input
          type="text"
          name="name"
          id="name"
          className="block w-full border-0 p-0  text-gray-900 placeholder-gray-500 focus:ring-0 sm:text-sm"
          placeholder="Your name"
          ref={inputRef}
        />
      </div>
      <button
        onClick={() => {
          fetchUser();
        }}
        type="button"
        className="items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
      >
        Login
      </button>
    </div>
  );
};

const Chat: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [user] = useAtom(userAtom);
  const inputRef = useRef<HTMLInputElement>(null);
  const bottomElementRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const pusher = new Pusher(env.NEXT_PUBLIC_PUSHER_KEY, {
      cluster: env.NEXT_PUBLIC_PUSHER_CLUSTER,
    });

    const channel = pusher.subscribe("chat-app");
    channel.bind("message", function (data: Message) {
      console.log(data);
      data.timestamp = new Date(data.timestamp);
      setMessages((prev) => [...prev, data]);
    });

    fetch("/api/message")
      .then((res) => res.json())
      .then((data) => {
        const oldMessages = data.map((message: any) => {
          console.log(message);
          return {
            user: {
              username: message.user.name,
            },
            message: message.body,
            timestamp: new Date(message.timestamp),
          };
        });
        setMessages(oldMessages);
      });

    return () => {
      channel.unbind_all();
      channel.unsubscribe();
    };
  }, []);

  console.log(messages);

  useEffect(() => {
    bottomElementRef.current?.scrollIntoView();
  }, [messages]);

  const onSend = () => {
    fetch("/api/message", {
      method: "POST",
      body: JSON.stringify({
        user: {
          username: user,
        },
        message: inputRef.current?.value,
        timestamp: new Date(),
      }),
    });

    inputRef.current!.value = "";
  };

  return (
    <div className="flex h-screen w-full flex-col bg-black sm:h-[800px] sm:w-[640px] sm:rounded-lg">
      <div className="scrollbar flex flex-1 flex-col overflow-y-auto p-2">
        {messages.map((message, i) => (
          <Message
            key={i}
            message={message}
            sender={message.user.username === user ? true : false}
          />
        ))}
        <div ref={bottomElementRef} />
      </div>
      <div className="flex h-12">
        <input
          ref={inputRef}
          placeholder="Message"
          className="flex-1 rounded-lg bg-black px-2 text-white outline-none"
        />
        <button onClick={onSend} className="px-2 text-white">
          Send
        </button>
      </div>
    </div>
  );
};

const Message: React.FC<{ message: Message; sender: boolean }> = ({
  message,
  sender,
}) => {
  const [dateReveal, setDateReveal] = useState(false);

  if (sender) {
    return (
      <div className="mt-1 flex flex-col self-end text-white first:mt-auto">
        <div className="flex items-center">
          {dateReveal && (
            <div className="px-3 text-xs text-gray-400">
              {message.timestamp.toLocaleString("en-GB")}
            </div>
          )}
          <div
            className="w-fit max-w-[12rem] break-words rounded-2xl bg-blue-700 py-2 px-3"
            onClick={() => setDateReveal((prev) => !prev)}
          >
            <span>{message.message}</span>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="mt-1 flex flex-col text-white first:mt-auto">
      <div>{message.user.username}</div>
      <div className="flex items-center">
        <div
          className="w-fit max-w-[12rem] break-words rounded-2xl bg-gray-700 py-2 px-3"
          onClick={() => setDateReveal((prev) => !prev)}
        >
          <span>{message.message}</span>
        </div>
        {dateReveal && (
          <div className="px-3 text-xs text-gray-400">
            {new Date(message.timestamp).toLocaleString("en-GB")}
          </div>
        )}
      </div>
    </div>
  );
};
